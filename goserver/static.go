//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/index.html"
	tmp.Contents = "1f8b08000000000004ffb4597f73db3892fd9f9fe22d37739637347fc896c7b14955651c65e33bc7f6daceae7d5353138884242414c903405bba54befb55032445799c99d45c2d2a8924b0896ebc7ee84677e2bfbcb93cbdbdbf9a60a197f9d889ed07102f38cbc60e00c45ae89c8fff2954cd72fcc4944871b21b0776da8a2cb96648174c2aae13f7c3eddbbd231741f350a552541a4aa689bbd0ba52c741909619f73ffd4fcde5da4fcb65f0c97cdddbf7f7fdc85f8ac2ffa45c8842f3b9147a9db86ac186a3c3bdb7f3ea741afcd77ffe233fbf985dd6af22cdf6876570f1febf57b97ebc2e8ffea1979fdf5f67afeba3c4452a4ba54a29e6a2485c5694c57a59d6ca1dc78132266ddba7d7154f5ccd573af8c41e98b5da1d3b66870802dc705d57e02bb6ac72aeecf40393dd0c12fcfccb899d6fa5fcaa568b01be4064c7883c18d08ee1be91ec11e5039739ab2a51cc910a99e65cb91e089a637c8c425c4fde3b43f381db8550b026e151e439a61c7cc5d35af30c8f422fc00a1c85e1ea300c21966cce9d7df3a673603eec028d55c8247b54cfa9f79d9111770e43bcbdbcc6191284b8bdc4300c43dcdc4eae300c9d1f43e0f4ecfaf47c82330f671ece9ca3101793bb5b9c39af42dcbcfee7c40171e7a345e32b767f0f97e1135c94283097ac5a6cd0400307fe3c1ed8b75bc3b7116150829c4b16703cb207ee3b68104103c92a31801c85a10302e27c728b3512ac10201a1ee16fb83a737014a27b320c43bcc480e6fe869bb30bacb1ebe055085c9d5fde62e5ad9d280c2d7e2b278a420be0c73f826dff096c699997b5e4199496a2ea73091d7cff1ffc3a007f07c1695ea69f15ca59638df21d74081284d793f7f897c8f482641a433b464721f61045a1038296907d34a209ae2fde2022c809c5fe032bf012e6a55796b56beba243922764216658e38746d630fadde4027fbfbcf9f01309840e2985617cdfbdd1b0ef2344fb215a2f213a08edf7b58368d4b80cd16188c9c51bf2a7255b145ae252f000836445562e0d36d289424b66270af743b329d9ec74381a3951786027e75b93233b39dd9a3c0c717a797e790de961ee61ea44e18fa4fff6c3f5853d81864cf66b1304b643d3c1132ef543532e8a2d32d91dfd9b8fe26f0ce89dc4d1a8d9ee7034f2422fecce663f5cd96845b4a0536ae0bd0312f2b73d9e66ea9ea6ec013db367d24cdfdd21c1280cc991b053f7f7488ce41ececc2105cecf2e26b8f3ee3ddcdd79f7f70ef1e5c246c168d8da187aa167fcb96fc9f9ac8dc426aba6b3914865a73a1b8de6c3d6a08d8ddd063b1b5f928d14837e6be3ab86b7670e6dfb8642f5477cdd6dd29c19cf3264b461c85b5114422df03667f35e887e4a0c93e3f482a3959fe56cee6d826c595078ed4565cbe1e1817778e445c3c336f4e243d57998fc42c8504a1a3511d89c5bf28e09cc07749ccdd661c2eb9d77df38d6b8e6deb8d47cbd336ea480f43a2f8bb9711f253dd26196a2184f6edb68e8a9b62eeb29a1674d7cb877c84dad921f9be860616e807e3198d545aa45590c76f1c59e4c73cbb82de7f39c1bdc163caff632a1aa9cad5b891703f7af34efeefa692ed2cf9b65786f1d7472bfaa8aa5dcddf5b55977d004011adcaf247fe0857ec367accef5a04dd2c0d7dd93c64e63d34d3d5d0a6d6c4acb8cf76c999572e9eefaca087ccb16ba24912012bc18e885507db6bdf0d927b61a7410d0a0abd831dcabcb9b5bd76bb5d1a8657e0c37d89ecc9866c74681afb8142c17ffcb07bb5befa93a4db952c7e840a7977a5860e3033bc40c03b3b23f91b294489204ae8b2d8ced208f6826e75cbbbb3ed35a0e5c2553d77349c5b1a0bb583017b3932953fcf0c073f1d2ae7bcd559deb0de6edd8acf72b27d5eeae4fb7f28151df0703f80a9e2bfed474ebfc674d72bb8bd8667c53df4e5c8d775a6b2d0a2fb11307d578e7a91d7db37a3f88469da2dfa55b9f6dafab8a1719da28045da2ac25deddbe3f6f579b951203a295a0747e0281b893f7735eccf5e204e2e5cb2d77d146db45c95546cd6027cec538664873a654e2e625cb7e6da45c2c249f25ee5f5d882c71098be689fa59fce28b8cf0700d46fd7973c7a74771c0c671908bf1cec6cb5ffb3b9d14aa96f6acb70b80490e73b2d934a7f868c78b81eb6f99b6eb4f45910d768ce88ed7f17a6bc706a16c73ec2c3de18a6c9b0824a7571a4967c6cf22a3abd82f7e5a667c130b407590e2361468bed2f80fc8ba80d010cb25cf04d33c5fd39daf1984392de1eefa0f2c1fe8d516e15f0c76282eec7401a487531781e81bad1607b6fe69ab36bda630b9ee8ab65429d73e339631c9d9177be53b8ec2f0879396986239c7174c4b9971798ca85a4195b9c830cd59fab993d2043fda05e8d6f0c3092a9665a2981f6354ad369219bee0814b2d5296efb15ccc8b63e8b23ab107210e8ca564591cb455753c2db3354d51796d34354b276e14b6bb40ace538d654df657a91b847e10fdd232026e4b0e47a5166890d9586a5227b4b3119055bf2a4fbc54caa49dca0b70229e02b0354236d3c6556b1df64f9a812773f74e9c6aac80277ec34d73f7b7705ae72ce14072f349758d341fde9f5cdd929165c720fa5b464a6434cfc6daa52cafd5400d0ed40d97a1a33592ecd8414f385de5bf2a2f69beab5a94a81d7e7ff7a7d7f030a0f465525cbb964cba602c60e5d6776a034d37cc90b4d652ce5f7c7854817b6ca508bf291dea5bfd256ca3e15b4546b13cbec88831619eb243b625154b536d929716dcab36899848c0796d73c71df4dceafdcf13765dbf71ae9eb0f1738bd7c33f94bd72fa11107e4dd56771ce8a617432eebf830dce6c36238beb150c6c162d8be0bc4756e5cda46981e03e2a0ce5b41a3240eb4ec261af6a565ae2a5624eeb0ff66261eccaab4f5e68e0143f4c46d6e2cc74559f093de3bd4558ac6ef785ec5c1226ad5d088abf159a14be3fd99e07906362d1f38f908292b1a72b186598dd3bdbe5bb7da210b5e985717cd9d2526368f3ba463d37d1a635a6b5d163e25b4beebabf1ed82b74a2c6916ec8183992b0411f969abe5a92592eb5a16d498214b84c64cd07d99abe7749558b2cf66abb2535a5719d3362f98fb83d90d01512b3b3b2bf3bc7ca4be511bf8d5f1d37d649d6bed88333d3eb55d9b9587b507190759134ddb1167d998766f11b3d22d5cad266492ba47ac6959d131962c13b5c23598cd0c6959ca4c144c7345ed0d1f785b767d3263685c493e8edab2b5ade38661db571a859ef943f1820e751cd00bb4c538c8bac36087d9d82595bfccc3d443fafcbe6e9ab4456d12d9704728823433f7098a45b4b52d547d80f060725e5340b1e9d9bde699ebc1fdbbe4bc703db02283fb535e731792ab8aa75a3cf07ced03372574691dcc3027f13ddbe8331e7d2ceb3cb3e4fe53a0d8ed037f048ea95357918775e46135f4b01e3e0f51c37deb7d7aeb9bbea79e00a65c3f725e18e4f46389aa1485562004c44cf0ec59bf77aea7f571107a87a187a3d08b8621f9ff7b9c6dea3ae2f077ec82647fb30bc5c99350a2a052ab122b9eb7d4ed8cc786c4fe77b397b411773132cc353fa330f4e81fca65b4bb3f7417097dc7ceac98096d9bb3a9d8035744ae26b7610ff7658d783a5ed64ac7c1746c9227cb732bd4c4526ac1510fb9717d7fe92e999ae0f5f4f4c5c17698d96421dc981efb9364048af574a236118cdb86ba397bcf36a529c2f0072ef744914acec86b4dc4694ecd38beba9e5034a1eabddf5f699a4096596d68695bd6d4cda34ea2ecb5d20e9ab66dbfe7366ae6fa2d376ac2d890d376dc7eecda2a47b6dc8f03328a2256975ce220130fbd9f94439b9c49d78df6ee989abbd493cc49b75693709bbacefe77cad6a501302b52a962859afa919cb6a5b76f8649fb8d859bec1f07e6564a0fe2605a66ebb113070bbdccc7ceff050000ffff2b18a9e8331a0000"
	tmp.Length = 6707
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
