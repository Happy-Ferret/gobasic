//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/index.html"
	tmp.Contents = "1f8b08000000000004ffb4587f73db3693fe9f9fe279d9e42c37347fc8b1ebd8a4661247697ce7d8aeecb4f1753a2d44c222128ae401a02c5d26dffd660192925ca7cdf4e6c52496042e81dd671fec6237fed7ebcbd39bdbab31723d2f464e6c3f8038e72c1b3900106ba10b3efa59a8861578c5944871b21b0776da8accb96648732615d789fbfee6cdde918ba07da852296a0d25d3c4cdb5aed57110a455c6fd8fffd370b9f2d36a1e7c345ff7f6fd7d3ff2e7a2f43f2a17a2d47c26855e25aecad9f0e070efcdac3e9d06fff59f3f15e7177797cd8b48b3fd61155cbcfbef65a1ef27d5d14f7afee9dd247bd91c252e5259295549311365e2b2b22a57f3aa51ee280e9451695b3fbdaa79e26abed4c147b660566b77e4180b1104b8e6baa9c1976c5e175cd9e90593fd0c12fcfadb899defa4fcba51f9009f21b263441e0c68c7705f4b768f6ac165c1ea5a9433a442a60557ae0782e6187f442126e377ced07ce026170a5625dc8ba2c094832f79da689ee15ee81cacc451182e0fc31062ce66dcd9376f3acfcd875da0d50a9964f7eab1ed7de7c0883b8721de5c4e708604216e2e310cc310d737e32b0c43e78710383d9b9c9e8f71e6e1ccc3997314e262fce10667ce8b10d72f7f1e3b20eefc61d1f882ddbfc265f80017254acc24abf3351a68e1c03fc703fbd6347c1d110625c8b9a401c73d5b70df418b085a48968901e4280c1d1010e7e31bac90608900d1f008dfe3eaccc15188fec9300cf10c039afb1ed767175861d7c18b10b83abfbcc1d25b3951185afc964e148516c03ffe0eb6fd07b0a55551359267505a8a7a934be8e1fbffe0d703f817084e8b2afda450ddb5da28df418f20413819bfc32f22d339c9b48af68c8e42ec218a4207042d217b6f44134c2e5e2322c809c5cd0756e019cc4b2f2c6b57d64587244fc842dc6185a7adac61f4dbf1057ebcbc7eff8a044287368561fca67ba3e1a68f10ed87e8bc84e87968bfaf1c4407adcb101d86185fbc267f5ab245a1252e050f30485666d5dc60239d28b46476a2703f3446c9d6d2e1c1811385cfede46c6bf2c04e4eb7260f439c5e9e5f4e203dcc3c4c9d28fc81f6bf793fb9b027d090c97e6d83c076687afe804b9ba1a910e51699ac45ffe6a3f82705fe7c123783938d4d44023a9306cc0f4042deb587d14cddd2943d8e67f6049ae90f1f90e0200cc96db053b7b7488ce41ececc9104cecf2ec6f8e0dd7af8f0c1bbbd75881d1736e61133aed7410f5f761da7cd1b4f06774d996a5195835d7cb61e30d9e4a69acd0a0e9d73e4bca8f732a1ea82ad3a892703f73b9a7777fdb410e9a7f5327c631df472bfab9aa5dcddf5b55977d03a9b06f76bc917bcd4aff91d6b0a3de88231f065f7a4d5d3e874dd4ce7421b9d280b6de87257c9b9bbeb2b23f0355d28199220123c19e85ca8dd7e71e089cf3eb2e5a0878006a5dc63b85797d737aed7ed46a391c531dc607b32639a1d9b0d7cc5a56085f85f3ed8dd7a4f3569ca953a460f3abdb48105d63eb043dc616056f6c75256124992c075b185f1a383155cea813be1aa29345c3cb3abd8df5b3bd220776a26675cbbbb3ed35a0e5c2553d77349bf6341093b9889bb932953fcf0b9f770b9367baec77abddf39e9edeefa74751b18dd379104be80178a3fb41b9d01e3c9e472b2d6dfa0f06005cbb247d577fbccbe1e5fd56d27ae473b1d5066233cc34e1cd4a39d073b7ed93461e307f1b5dfe82f79dd332f08f0b2ae7999a10b7cd015aa46e2edcdbbf36eb5bb4a6240fc15941f4e2010f7f27ec1cb99ce4f209e3ddbe20519da2d4a6e35db0c76e2428c6286b4604a256e51b1ecf756ca452ef95de27ee74264894b58b44fd4afe2375f6484876b30da9c3797467a14076c14078518edac19f165d3d271a91a69834ab70098e43021844d0bbacfd8f164e0fa5baaedfa535166831d23bae3f50768cb628350b63edf96ca7045b64d0492d34b8da457e35791516effcd4fab8caf830ec83f8adb98a3f952e33f209b124243cce73c134cf3624597887610e6b484bbeb2f5831d04bbd868278ba430168a78f54eb87441deb6dfa46abc581bd507765805e513c5ef55540aa946b9f19cd98e4ecb3bd431c4761f8f4a423a698cff019d34a665c1e23aa97505521324c0b967eeaa534c18f6e014a4c4f4f50b32c13e5ec1807f5722d99e133165c6a91b2628f1562561e4357f5893d0871603425cde2a02bd3e26995ad688aea35b353bb74e246616705622d47b1a68221d379e21e854ffb47404cc861ce755e65898dc986a5227b43c11f259bf3a4ffc54c4e4bdc606305da802f0d50adb4f19459c57e93d5bd4adcfdd0a52b90220ddc91d3de27ec6508b82a38531cbcd45c624507f5d5cbebb353e45c720f95b464a6434cfc6dcb1c5425a71b25a553650b34dcc96a6e26a498e57a6fcecbc66fcba1b6cc015e9efff2f2f61a141ecc56b5ac6692cddb920a3b94d577a034d37cce4b4d7511dd60ef7391e6f6daaaf2ea9edea5ffd2965e3e554854bc11cbec88830e19eb243b6251d68d366930716d6eb56899cc8f052b1a9eb86fc7e757eee8abb2dd7badf4e4fd054e2f5f8fffd517e034e280bcdbed1d07ba2deec9653d1f86db7cc887a36b0b651ce4c3ee5d206e0ae3d22ec26c30200e9aa213349bc48196fd44cbbeb42a54cdcac41d6ebe99898559954c6f2f3330444fdcf66a745c56253fd97887da14d1e82d2fea38c8a36e1b1a713d3a2b7565bc7f277891814dab05271f2165654b2ed632ab75bab7e9d6adfa3ae7a579356f2f4731b179d4231d9b76c608d346ebaaf429a16dbabe1edde4bcdbc49226670b0e66ee2a44e487b5fb434d24d78d2ca9d2274d84c69d2885cab97a6caf0a73f6c9982afb4d9b3a63dae60573d730d610108db2b377555154f7d488e802bf3a7e6847d6bbd68e38d3a353db06587a5879907190b5d1b41b71968dc87a8b9895eee0ea764226a91dc1da1e081d63c932d1284cc06c6648ab4a66a2649a2baa977de04dd5375e8ca2712df928eaeaa0e1c181177a21c514bb270e42cffca37841873a0ee80532310eb2fe30d8610c33f514f330f5903e6ed7759bb6a8ee962d7784224833739fa05844a66da1ea03840793b386028a4dcfee8467ae07f747c979e97a606506f755d1701792ab9aa75a2c78b1f281eb0abab20e669891f89eed1c198fde574d915972ff2350acf9c0df81634aa165e4611579580e3dac868f43d472df7a9fdefaaaefa9c8c494eb7bce4b839cbeaf5057a2d40a8480b8133c7bd4efbdeb697d3c0fbdc3d0c351e84543e3ff6f7176db87c1ea1bac20d93f59a13879124a9454d3d562c98b8ebabdf25893d8ff66f6d26ec45d1c18e69a9f51187af487721959f7b7ee22a16fb0cc8a99d0b63e9b8a2db82272b5b90d7bb8ad1ac4d3d1bc513a0ea623933c595158a13696524f879a92adeb3797ee93a9095e0f4f5f1c6c87997516c2b569da3e4846a0584f276a1dc1b8edd09ab3f7689793220c5f70b927ca5472465e6b234e7b6a46f1d5644cd1e4eb3d506a0db5a1a5eb81527b885a5372a337f3bced036e36710edab9cd1ece6188072d9c1fdafe92e9ad5afc48298a587d7289834c2c367e520e6d73265d37babb636aee520f3227dd5a4dc26deb3adb9fdfba340066452a55ac505b6b92d3b6f6dd54c3a4fd56c375f68f03732ba5077130adb2d5c889835ccf8b91f37f010000ffff6ca6ffc984180000"
	tmp.Length = 6276
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
