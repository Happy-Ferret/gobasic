//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/index.html"
	tmp.Contents = "1f8b08000000000004ffb4586d73db36d6fdce5f71ca268fe586e68b1cbb8e4d6a267194c6cf3ab66b3b6dbc9d4e0b9190888422b900284b9bc97fdfb90049496ed266bab398c492c04be0e2dc83fb167ff3f2f2f4f6ee6a8c5ccf8b9113db0f20ce39cb460e00c45ae8828f7e12aa61055e3025529cecc6819db62273ae19d29c49c575e2bebd7db577e422681faa548a5a43c9347173ad6b751c04699571fffdbf1a2e577e5acd83f7e6ebdebebfef47fe5c94fe7be542949acfa4d0abc455391b1e1ceebd9ad5a793e01fffff63717e31bd6c9e459aed0fabe0e2cd3f9785bebfae8e7ed4f30f6faeb3e7cd51e22295955295143351262e2bab7235af1ae58ee2401995b6f5d3ab9a27aee64b1dbc670b66b576478e39218200375c3735f892cdeb822b3bbd60b29f41825f7e3db1f39d945f372a1fe02344768cc88301ed18ee4bc9ee512db82c585d8b728654c8b4e0caf540d01ce3f728c4f5f88d33341fb8cd85825509f7a22830e1e04b9e369a67b8173a072b711486cbc3308498b31977f6cd9bce53f3611768b54226d9bdfadcf6be7360c49dc310af2eaf718604216e2f310cc31037b7e32b0c43e7fb10383dbb3e3d1fe3ccc3998733e728c4c5f8dd2dce9c67216e9eff347640dcf9dda2f109bb7f86cbf0012e4a94984956e76b34d0c281bf8f07f6edd1f06544189420e392061cf76cc17d072d22682159260690a3307440409c8f6fb14282250244c3237c87ab33074721fa27c330c4130c68ee3bdc9c5d60855d07cf42e0eafcf2164b6fe5446168f15b3a51145a007fff2bd8f61fc0965645d5489e416929ea4d2ea187efbfc1af07f04f109c1455fa41a19ab6da28df418f2041783d7e839f45a673926915ed191d85d84314850e085a42f6de8826b8be788988202714371f588127302f3db3ac5d59131d923c210b31c50a8f5b59c3e8d7e30bfc7079f3f60509840e6d0ac3f84df346c34d1b21da0fd15909d1d3d07e5f39880e5a93213a0c31be7849f6b4648b424b5c721e6090acccaab9c1463a5168c9ec44e17e680e25db930e0f0e9c287c6a27675b93077672b2357918e2f4f2fcf21ad2c3ccc3c489c2ef69ffdbb7d717f6061a32d9afad13d8764d4f1f7069d33515a2dc22933dd1fff82afe41813fdec44de7647d139180eea401f31d909075ed653453773465afe399bd8166fadd3b24380843321becd4dd1d1223b98733732581f3b38b31de79771edebdf3eeee1c62c785f579c48c9bb5d3c3a75dc769e3c6a3c1b429532daa72b08b8fd602269adc56b359c1a1738e9c17f55e26545db05527f168e07e4bf3eeae9f1622fdb05e866fac835eee3755b394bbbbbe36eb0e5a63d3e07e2df98297fa259fb2a6d083ce19039f764f5a3d8d4e37cd642eb4d189a2d0862ed34acedd5d5f19812fe942c1900491e0d140e742edf68b038f7cf69e2d073d043428e41ec3bdbabcb975bd6e371a8d2c8ee106db9319d3ecd86ce02b2e052bc4bff96077eb3dd5a42957ea183de8f4d2061658dbc00e31c5c0acec8fa5ac24922481eb620b633bc8229ac919d7eeaecfb4960357c9d4f55cdae25850cc0d66627a32618a1f3ef55c3cb1eb5e73d5147a8d7937d6ebfdc6696b77d7a7ec6b60b6df0403f8045e28fe50756bfccfaae4f601773dbeb8df4e5c8f763a6d2d0a4fb01307f568e7a11e9b6a6dfc201af51bfd29dd7a4204019ed7352f3374fe08ba42d548bcbe7d73dead36ad2406442b416efb0402712fef17bc9ce9fc04e2c9932d73d141bb45c954669bc14e5c8851cc90164ca9c42d2a96fdd64ab9c8259f26eeb72e4496b88445fb44fd227ef5454678b806a3cd7993cbd1a33860a33828c468676de54f9b271d97aa91f6ae770b80490e73b3d9a4a034c38e4703d7df526dd79f88321bec18d11dafe7f5d6890d42d9fada597ac215d93611484e2f35925e8d5f444621f7573fad32bef60520fb286e5d81e64b8dff836c4a080d319ff34c30cd8b15c5f67610e6b484bbeb2f5831d0cb2dc23f1aec905fd8e91dc8064ebd07a26fb45a1cd83cb7cbcef58adce4aa4fce53a55cfbcc68c624671f6d683f8ec2f0f149474c319fe1232695ccb83c46542fa1aa426498142cfdd04b69821fdd02142f1e9fa0665926cad9310eeae55a32c3472cb8d42265c51e2bc4ac3c86aeea137b11e2c0684a9ac541573dc5932a5bd114955166a776e9c48dc2ee1488b51cc59af2f84ce7897b143eee1f0131218739d7799525d6551a968aec15f964946cce93fe1733a12671838d156803be3440b5d2c6526615fb4d56f72a71f743973213451ab823a70df3364701ae0ace14072f359758d1457df1fce6ec143997dc43252d99e912137fdbea0355c929d1a328a76cdd84a9ace666428a59aef7e6bc6cfcb64a69ab0fe0f9f9cfcfef6e40eec16c55cb6a26d9bcad74b043c176074a33cde7bcd454ae5062799f8b34b7d9a4caab7b7a97fe4b5b11f954b8504d452cb3230e3a64ac91ec88455937da44a7c4b521cfa265023216ac6878e2be1e9f5fb9a32fca76efb5d2d76f2f707af972fc4d5f17d38803b26eb7771ce8b6e62693f57c186ef3211f8e6e2c9471900fbb7781b8298c493b0fb3c18038688a4ed06c12075af6132dfbd2aa50352b1377b8f966261666553a7a9b63c0103d71db8ce5b8ac4a7eb2f10e750fa2d16b5ed4719047dd3634e27a7456eaca587f2a7891814daa05271b2165654b2ed632ab35bab769d6adb237e7a579356f739698d83cea918e4d97618449a37555fa14d0364d5f8f6e73de6d624993b3050733290411f96149fd5013c975234b2ac04913a13115a55039579fdbabc29c7d304795fda64d9d316de382c91fcc69088846d9d9695514d53df5073ac7af8e1f9e23eb4d6b479ce9d1a9adce971e561e641c64ad37ed469c65233abd45cc4a7770753b2193d425606d6b82aeb164996814aec16c6448ab4a66a2649a2b2a637de055d5f7438ca2712df928eaca93e1c181177a21f914bb270e42cffc237f41973a0ee8053a621c64fd65b0c31ccc9439ccc3c443faf973ddb4618bca61d9724728823433f904f9223ada16aa3e407830396bc8a1d8f0ec5ef3ccf5e0fe20392f5d0faccce0be281aee427255f3548b052f563e70534157d6c00c3312dfb30d1d63d1fbaa29324beebf058a3d3ef057e0980a65197958451e96430fabe1e7216ab96fad4f6f7dd1f654fb61c2f53de7a5414edf57a82b516a0542404c05cf3e6bf7def4b43e9e86de61e8e128f4a2a1b1ffd718bb6d8f60f515a720d93f9c4271b2249428a9d4aac592171d757be5b126b1ffd5eca5dd88bb3830cc353fa330f4e80fc5323add5f9a8b84bee26456ccb8b6f5dd546cc11591ab8d6dd8c35dd5209e8ce68dd271301999e0c98ac20ab5be945a2dd42b6c4dbfb9741f4c8df37a78fbe260dbcdaca3106e4c2ff5413002f97aba516b0fc66de3d4dcbdcf361fc9c3f005977ba24c256764b5d6e3b4b766145f5d8fc99b7cb935491d9bd6b574ad49eada50c7486eb44c9eb6edb9cddeca413bb7d95a390cf1a0b3f27ddbf6312d4f8b1f29451eab0f2e719089c5c64f8aa16dcca474a3cb1d53934b3d889c94b59a80dbd675b66dbe95340066452a55ac505b3f92d1b6f6dd54c384fd56c375f48f039395d283389854d96ae4c441aee7c5c8f94f000000ffff87fbd0e71b180000"
	tmp.Length = 6171
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
