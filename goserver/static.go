//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/index.html"
	tmp.Contents = "1f8b08000000000004ffb4587f73dbb696fd9f9fe23cbe642dbfd0fc21c7ae63939a491ca5f1ae63bbb6d3c6dbe9341009894828920b80b2b4997cf79d0b9094e43a6da63b0f93581278095c9c7b707fc5ff787d797a7b773546aee7c5c889ed0710e79c65230700622d74c1473f0bd5b002af9812294e76e3c04e5b9139d70c69cea4e23a71dfdfbed93b7211b40f552a45ada1649ab8b9d6b53a0e82b4cab8ffe97f1a2e577e5acd834fe6ebdebebfef47fe5c94fe27e542949acfa4d0abc455391b1e1ceebd99d5a793e0bffef3a7e2fc627ad9bc8834db1f56c1c5bbff5e16fafeba3afa49cf3fbfbbce5e3647898b54564a5552cc4499b8acaccad5bc6a943b8a036554dad64faf6a9eb89a2f75f0892d98d5da1d39e6840802dc70ddd4e04b36af0baeecf482c97e06097efdedc4ce77527edda87c802f10d931220f06b463b8af25bb47b5e0b260752dca195221d3822bd70341738c8f5188ebf13b67683e709b0b05ab12ee455160c2c1973c6d34cf702f740e56e2280c97876108316733eeec9b379de7e6c32ed06a854cb27bf5d8f6be7360c49dc3106f2eaf718604216e2f310cc31037b7e32b0c43e78710383dbb3e3d1fe3ccc3998733e728c4c5f8c32dce9c17216e5efe3c7640dcf968d1f88add3fc365f80017254acc24abf3351a68e1c0dfc703fbf668f836220c4a907149038e7bb6e0be831611b4902c1303c851183a2020cec7b75821c11201a2e111fe85ab33074721fa27c330c4330c68ee5fb839bbc00abb0e5e84c0d5f9e52d96deca89c2d0e2b774a228b4007efc2bd8f61fc0965645d5489e416929ea4d2ea187efff835f0fe09f203829aaf4b342356db551be831e4182f07afc0ebf884ce724d32ada333a0ab187280a1d10b484ecbd114d707df11a11414e286e3eb002cf605e7a6159bbb2263a24794216628a159eb6b286d16fc717f8f1f2e6fd2b12081dda1486f19be68d869b3642b41fa2b312a2e7a1fdbe72101db426437418627cf19aec69c9168596b8e43cc02059995573838d74a2d092d989c2fdd01c4ab6271d1e1c3851f8dc4eceb6260fece4646bf230c4e9e5f9e535a48799878913853fd0feb7efaf2fec0d3464b25f5b27b0ed9a9e3fe0d2a66b2a44b945267ba27ff355fc83021b37f1e0a03deef0e0c00bbdb0bf9b9beeca7a2ba205dd5203ef0720217bdbeb69a6ee68ca5ed0337b27cdf4870f487010866448d8a9bb3b2446720f67e69202e76717637cf0ee3c7cf8e0dddd39c4970beb05a361a763e8859eb1e7be25e7a33a129bec36bd8e442a3bd5eb68763eec145aebd81fb0d7f119e9483ee88f3abe68797be6d0b16fc8557fc4d75dc76903dd93c1b429532daa72b08b2f963226fcdd56b359c1a1738e9c17f55e26545db05527f164e0fe93e6dd5d3f2d44fa79bd0cdf5807bddcefaa662977777d6dd61db4eca4c1fd5af2052ff56b3e654da1075df400beee9eb47a1a9d6e9ac95c68a31385cd0d5da6959cbbbbbe3202dfd285a2370922c19381ce85daed17079ef8ec135b0e7a0868508e700cf7eaf2e6d6f5badd6834b238861b6c4f664cb363b381afb814ac10ffcb07bb5befa9264db952c7e841a79736b0c0da067688290666657f2c65259124095c175b18db4116d14cceb876777da6b51cb84aa6aee7d216c78292846026a62713a6f8e173cfc533bbee35574da1d7987763bddeef9cb676777d4a170766fb4d3080afe085e20f55b7c67f5425b7cf10d6e39bfbedc4f568a7d3d6a2f00c3b71508f761eeab1a9d6c60fa251bfd19fd2ad274410e0655df33243e740a12b548dc4dbdb77e7dd6ad34a6240b41214674e2010f7f27ec1cb99ce4f209e3ddb32171db45b944c65b619ecc48518c50c69c1944adca262d9efad948b5cf269e2fed385c81297b0689fa85fc56fbec8080fd760b4396f924f7a14076c14078518edacadfc75f3a4e35235d2def56e0130c9616e369b149417d9f164e0fa5baaedfa135166831d23bae3f5bcde3ab141285b5f3b4b4fb822db2602c9e9a546d2abf1abc82847f8cd4fab8caf7d01c83e8a5b57a0f952e33f209b124243cce73c134cf36245c9483b08735ac2ddf517ac18e8e516e19f0c76c82fecf40e6403a7de03d1375a2d0e6c62de95137a456e72d55713a952ae7d66346392b32f3617398ec2f0e949474c319fe10b2695ccb83c46542fa1aa426498142cfddc4b69821fdd0214ce9e9ea0665926cad9310eeae55a32c3172cb8d42265c51e2bc4ac3c86aeea137b11e2c0684a9ac54157eec5932a5bd114d57d66a776e9c48dc2ee1488b51cc59a0a8f4ce7897b143eed1f0131218739d7799525d6551a968aec0df964946cce93fe1733a12671838d156803be3440b5d2c6526615fb4d56f72a71f743975229451ab823a7cd4b6c52055c159c290e5e6a2eb1a28bfaeae5cdd929722eb9874a5a32d32526feb6e512aa9253664a514ed9420f5359cdcd8414b35cefcd79d9f86d59d5964bc0cbf35f5ededd80dc83d9aa96d54cb2795b9a6187e2ec0e94669acf79a9a9bea24cf83e17696ed35f9557f7f42efd97b684f3a9d2a222905866471c74c85823d9118bb26eb4894e896b439e45cb04642c58d1f0c47d3b3ebf7247df94edde6ba5afdf5fe0f4f2f5f81f7d214f230ec8baddde71a0db260199ace7c3709b0ff9707463a18c837cd8bd0bc44d614cda79980d06c441537482669338d0b29f68d9975685aa5999b8c3cd3733b130abd2d1db1c0386e889db662cc76555f2938d77a8dd118ddef2a28e833ceab6a111d7a3b35257c6fa53c18b0c6c522d38d908292b5b72b19659add1bd4db36ed5e9392fcdab799bb3c4c4e6518f746cda22234c1aadabd2a780b669fa7a749bf36e134b9a9c2d3898492188c80f7b000f35915c37b2a48e01692234a6a2142ae7eab1bd2accd9677354d96fdad419d3362e98fcc19c868068949d9d564551dd5343a373fceaf8e139b2deb476c4991e9dda76c2d2c3ca838c83acf5a6dd88b36c44a7b78859e90eae6e276492da1aaceda5d035962c138dc235988d0c6955c94c944c734575b70fbca9fa068e5134ae251f455d3dd51518c3b06b781c849ef947fe822e751cd00b74c438c8facb60873998a9cb98878987f4f173ddb4618bea77d9724728823433f904f9223ada16aa3e407830396bc8a1d8f0ec5ef3ccf5e0fe28392f5d0faccce0be2a1aee427255f3548b052f563e70534157d6c00c3312dfb31d2863d1fbaa29324beebf058a3d3ef057e098026a197958451e96430fabe1e310b5dcb7d6a7b7be697b2a5631e1fa9ef3d220a7ef2bd49528b5022120a682678fdabd373dad8fe7a177187a380abd681892fdbfc7d86d3f07abef3805c9fee1148a9325a14449a5562d96bce8a8db2b8f3589fdef662fed46dcc58161aef91985a1477f2896d1e9fed25c24f41d27b362c6b5adefa6620bae885c6d6cc31eeeaa06f164346f948e83c9c8044f561456a8f5a5d41ba2e6666bfacda5fb606a9cd7c3db1707db6e661d8570639abf0f8211c8d7d38d5a7b306e3bbde6ee3dda2d250fc3175cee8932959c91d55a8fd3de9a517c753d266ff2ed5e2ab598ac3b338d54eaa5529b895a5c72a3c7f3bced276e36830edab9cd5e107507accbe95a413ff4f5fe91ed52c50129451eab0f2e719089c5c64f8aa16dcca474a3cb1d53934b3d889c94b59a80dbd675b6cfbf95340066452a55ac505b3f92d1b6f6dd54c384fd56c375f48f039395d283389854d96ae4c441aee7c5c8f9bf000000ffffcc3fe071cc180000"
	tmp.Length = 6348
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
